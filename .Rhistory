devtools:::document()
devtools:::document()
devtools:::document()
file.edit('~/.Renviron')
library(paperTools)
devtools::load_all()
#'
#' Copy the diary template and execute the marked section.
#'
#' @importFrom tibble tibble
#' @importFrom stringr str_extract str_replace
#'
#' @param filename_
#' @param template_
#'
#' @export
diary_template = function(filename_ = paste0(format(Sys.Date(), "%Y%m%d"), '.Rmd'), template_ = '~/template.Rmd') {
df_convert_ = tibble(
raw = readLines(template_),
source = str_extract(raw, "&.*?&"),
toEval = str_extract(raw, "(?<=&).*?(?=&)"),
UMI = ifelse(is.na(source), NA, evalParse(toEval)),
lines = ifelse(is.na(source), NA, 1:length(source))
)
file_new_ = c()
for (i_ in seq_along(df_convert_$raw)) {
file_new_[[i_]] = df_convert_$raw[[i_]]
if (i_ %in% df_convert_$lines) {
file_new_[[i_]] = str_replace(file_new_[[i_]], "&.*?&", df_convert_$UMI[[i_]])
}
}
writeLines(file_new_, filename_)
}
diary_template()
debugSource("F:/0Local/project/paperTools/R/main.R", echo=TRUE)
diary_template()
devtools:::document()
normalizePath('paste0(format(Sys.Date(), "%Y%m%d"), '.Rmd')')
file.exists(paste0(format(Sys.Date(), "%Y%m%d"), '.Rmd'))
message('You haven\'t started writing your diary today')
paste0(format(Sys.Date(), "%Y%m"), '.Rmd')
format(Sys.Date(), "%Y%m")
paste0(format(Sys.Date(), "%Y%m"), '00.Rmd')
devtools:::document()
newMonth
newMonth()
format(Sys.Date(), "%Y%m")
evalPlaceholder('~/month.Rmd')
debugSource("F:/0Local/project/paperTools/R/main.R", echo=TRUE)
evalPlaceholder('~/month.Rmd')
devtools::load_all()
evalPlaceholder('~/month.Rmd')
View(df_convert_)
View(df_convert_)
format(Sys.Date(), "%Y%m")
evalParse(df_convert_$toEval)
#' evalParse
#'
#' Run a string of characters
#'
#' @export
evalParse = function(texts_) {unlist(lapply(texts_, \(text__) eval(parse(text = text__))))}
evalParse(df_convert_$toEval)
devtools::load_all()
newDiary()
file_new_
remotes::install_github('Vinnish-A/paperTools')
remotes::install_github('Vinnish-A/paperTools')
detach("package:paperTools", unload = TRUE)
remove.packages("paperTools")
remotes::install_github('Vinnish-A/paperTools')
file.edit('~/.Rprofile')
remotes::install_github('Vinnish-A/paperTools')
<<<<<<< HEAD
text_ = "
source('~/.Rprofile')
pkgs = c('devtools', 'usethis', 'testthat')
paperTools::load_pkgs(pkgs)
"
text_ = "
source('~/.Rprofile')
pkgs = c('devtools', 'usethis', 'testthat')
paperTools::load_pkgs(pkgs)
"
cat(text_, file = '.Rprofile')
devtools::document()
devtools::document()
devtools::load_all(".")
=======
devtools::load_all(".")
newDiary()
file_new_
devtools::load_all(".")
newDiary()
df_convert_ = tibble(
raw = readLines(path2raw_),
source = str_extract(raw, "&.*?&"),
toEval = str_extract(raw, "(?<=&).*?(?=&)"),
UMI = ifelse(is.na(source), NA, evalParse(toEval, env_)),
lines = ifelse(is.na(source), NA, 1:length(source))
)
View(df_convert_)
library(stringr)
df_convert_ = tibble(
raw = readLines(path2raw_),
source = str_extract_all(raw, "&.*?&"),
toEval = str_extract(raw, "(?<=&).*?(?=&)"),
UMI = ifelse(is.na(source), NA, evalParse(toEval, env_)),
lines = ifelse(is.na(source), NA, 1:length(source))
)
View(df_convert_)
str_extract_all
str_count(df_convert_$raw, '&')
df_convert_ = tibble(
raw = readLines(path2raw_),
source = ifelse(str_count(raw, '&')>2, as.list(str_extract_all(raw, "&.*?&")), str_extract(raw, "&.*?&")),
toEval = str_extract(raw, "(?<=&).*?(?=&)"),
UMI = ifelse(is.na(source), NA, evalParse(toEval, env_)),
lines = ifelse(is.na(source), NA, 1:length(source))
)
View(df_convert_)
as.list(1:2)
df_convert_$source
rowDealer_ = function(row_, pattern_) {
as.list(str_extract_all(row_, pattern_))
}
df_convert_ = tibble(
raw = readLines(path2raw_),
source = ifelse(str_count(raw, '&')>2, rowDealer_(raw, "&.*?&"), str_extract(raw, "&.*?&")),
toEval = str_extract(raw, "(?<=&).*?(?=&)"),
UMI = ifelse(is.na(source), NA, evalParse(toEval, env_)),
lines = ifelse(is.na(source), NA, 1:length(source))
)
df_convert_
df_convert_$source
df_convert_ |> unnest()
library(tidyverse)
newDiary()
df_convert_ = tibble(
raw = readLines(path2raw_),
source = ifelse(str_count(raw, '&')>2, rowDealer_(raw, "&.*?&"), str_extract(raw, "&.*?&")),
toEval = str_extract(raw, "(?<=&).*?(?=&)"),
UMI = ifelse(is.na(source), NA, evalParse(toEval, env_)),
lines = ifelse(is.na(source), NA, 1:length(source))
)
devtools::load_all(".")
newDiary()
df_convert_
df_convert_ |> unnest()
df_convert_ |> unnest() |> View()
df_convert_ = tibble(
raw = readLines(path2raw_),
source = ifelse(str_count(raw, '&')>2, rowDealer_(raw, "&.*?&"), str_extract(raw, "&.*?&")),
toEval = str_extract(raw, "(?<=&).*?(?=&)"),
evaled = ifelse(is.na(source), NA, evalParse(toEval, env_)),
lines = ifelse(is.na(source), NA, 1:length(source))
)
View(df_convert_)
df_convert_ = tibble(
raw = readLines(path2raw_),
source = ifelse(str_count(raw, '&')>2, rowDealer_(raw, "&.*?&"), str_extract(raw, "&.*?&")),
toEval = str_extract(raw, "(?<=&).*?(?=&)"),
evaled = ifelse(is.na(source), NA, evalParse(toEval, env_)),
lines = ifelse(is.na(source), NA, 1:length(source))
) |> unnest()
View(df_convert_)
str_replace_all(df_convert_$raw[5], "&.*?&", 'a')
str_replace_all(df_convert_$raw[5], "&.*?&", c('a', 'b'))
str_replace_all(df_convert_$raw[5], "&.*?&", c('a', 'b', 'c'))
str_match_all(df_convert_$raw[5], "&.*?&")
str_match_all(df_convert_$raw[5], "&.*?&")
str_match_all(df_convert_$raw[5], "&.*?&")[[1]]
str_match_all(df_convert_$raw[5], "&.*?&")[[1]] |> unlist()
str_match_all(df_convert_$raw[5], "&.*?&")[[1]][, 1]
View(df_convert_)
tibble(
raw = readLines(path2raw_),
space = str_count(raw, '&')/2
)
rowDealer_ = function(row_, env_) {
while (str_detect(row_)) {
contains_ = row_ |> str_extract("(?<=&).*?(?=&)") |> evalParse(env_)
row_ = row_ |> str_replace("&.*?&", contains_)
}
return(row_)
}
rowDealer = function(row_, env_) {
while (str_detect(row_)) {
contains_ = row_ |> str_extract("(?<=&).*?(?=&)") |> evalParse(env_)
row_ = row_ |> str_replace("&.*?&", contains_)
}
return(row_)
}
tibble(
raw = readLines(path2raw_),
space = str_count(raw, '&')/2,
new = ifelse(space>1, rowDealer(raw), raw)
)
devtools::load_all(".")
newDiary()
citr:::insert_citation()
devtools::load_all(".")
newDiary()
devtools::load_all(".")
newDiary()
devtools::load_all(".")
newDiary()
raw = readLines(path2raw_)
rowDealer = function(row_, env_) {
browser()
while (str_detect(row_, "&.*?&")) {
contains_ = row_ |> str_extract("(?<=&).*?(?=&)") |> evalParse(env_)
row_ = row_ |> str_replace("&.*?&", contains_)
}
return(row_)
}
tibble(
raw = readLines(path2raw_),
space = str_count(raw, '&')/2,
new = ifelse(space>1, rowDealer(raw), raw)
)
row_
str_detect(row_, "&.*?&")
row_ = row_[5]
while (str_detect(row_, "&.*?&")) {
contains_ = row_ |> str_extract("(?<=&).*?(?=&)") |> evalParse(env_)
row_ = row_ |> str_replace("&.*?&", contains_)
}
row_
while (str_detect(row_, "&.*?&")) {
contains_ = row_ |> str_extract("(?<=&).*?(?=&)") |> evalParse(env_)
row_ = row_ |> str_replace("&.*?&", contains_)
}
rowDealer = function(row_, env_) {
while (str_detect(row_, "&.*?&")) {
contains_ = row_ |> str_extract("(?<=&).*?(?=&)") |> evalParse(env_)
row_ = row_ |> str_replace("&.*?&", contains_)
}
return(row_)
}
tibble(
raw = readLines(path2raw_),
space = str_count(raw, '&')/2,
new = ifelse(space>1, rowDealer(raw, env_), raw)
)
tibble(
raw = readLines(path2raw_),
space = str_count(raw, '&')/2,
new = map_chr(raw, rowDealer, env_ = env_)
)
tibble(
raw = readLines(path2raw_),
space = str_count(raw, '&')/2,
new = map_chr(raw, rowDealer, env_ = env_)
) |> View()
devtools:::document()
devtools:::document()
>>>>>>> 04f32ffd388d3cad788c23c92a432453b9a6bf04
