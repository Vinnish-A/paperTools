
# config ------------------------------------------------------------------


library(ggsci)
library(ggtree)
library(Seurat)
library(tidyverse)
library(clusterProfiler)

enrichment = function(dataset) {
  
  degs = FindAllMarkers(dataset, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
  gid = bitr(unique(degs$gene), 'SYMBOL', 'ENTREZID', OrgDb = 'org.Mm.eg.db')
  
  degs_filtered = degs |> 
    group_by(cluster) |>
    filter(p_val_adj < 0.01) |>
    ungroup()
  degs_filtered = full_join(degs_filtered, gid, by = c("gene" = "SYMBOL"))
  
  resultGO = compareCluster(ENTREZID ~ cluster, data = degs_filtered, fun = 'enrichGO', OrgDb = 'org.Mm.eg.db')
  resultKEGG = compareCluster(ENTREZID ~ cluster, data = degs_filtered, fun = 'enrichKEGG', organism = "mmu")
  return(list(enrichGO = resultGO, enrichKEGG = resultKEGG, degs = degs))
}

enrichment_of = function(genes_, toGo_ = "GO", cutoff_ = 0.05) {
  
  library(clusterProfiler)
  
  if (needTrans_) {
    gid_ = bitr(unique(genes_), 'SYMBOL', 'ENTREZID', OrgDb = 'org.Mm.eg.db') |> drop_na()
    genes_ = gid_$ENTREZID
  }
  
  if (toGo_ == "KEGG") {
    enrichKEGG(genes_, pAdjustMethod = "fdr", qvalueCutoff = cutoff_, organism = "mmu")
  } else if (toGo_ == "GO") {
    enrichGO(genes_, "org.Mm.eg.db", pAdjustMethod = "fdr", qvalueCutoff = cutoff_, ont = "ALL")
  }
  
}

capitalize = function(sentence_) {
  gsub("\\b([a-z])", "\\U\\1", sentence_, perl = TRUE)
}

reduceIntersect = function(lst_) Reduce(intersect, lst_)

load("./data/AKTP_AllStages.RData")
assign("epiAKTP", seuMexport)
rm(seuMexport)

DefaultAssay(epiAKTP) = "integrated"


stageNew = c("Primary Tumor" = "Primary Tumor", "Micro Metastases" = "Micrometastases", "Small Metastases" = "Small Metastases", "Macro Metastases" = "Macrometastases")
stageNew = factor(stageNew, levels = stageNew)

nameNew = c("sampleID", "index", "Stage", "nCount_RNA", "nFeature_RNA", "percent.mt", "percent.ribo", "Mouse", "Batch", "seurat_clusters", "UMAP1", "UMAP2", "Emp1_gene", "Krt20_gene", "Cdh1_gene", "Vim_gene", "Twist1_gene", "Zeb1_gene", "Zeb2_gene", "EpiHR signature", "HRCcore", "mKi67 signature", "Mex3a signature", "Epcam signature") 
epiAKTP@meta.data = epiAKTP@meta.data %>% 
  set_names(nameNew) %>% 
  mutate(cluster = case_when(
    seurat_clusters == "Ki67+" ~ "C0", 
    seurat_clusters == "Lgr5+ Ki67+" ~ "C1", 
    seurat_clusters == "Lgr5+ Ki67-" ~ "C2", 
    seurat_clusters == "Differentiated" ~ "C3", 
    seurat_clusters == "HRCs Krt20+" ~ "C4", 
    seurat_clusters == "HRCs Krt20-" ~ "C5"), 
    cluster = factor(cluster), 
    Stage = stageNew[Stage])
Idents(epiAKTP) = epiAKTP$cluster


# Analysis ----------------------------------------------------------------

## Small-Macro ----

### Degs ----

allFea = epiAKTP@assays$MAGIC_integrated@data |> rownames()

smallMacro = FindMarkers(epiAKTP, ident.1 = "Small Metastases", ident.2 = "Macrometastases", only.pos = F, logfc.threshold = 0, group.by = "Stage", features = allFea)

geneSetHallmark = read.gmt("./data/mh.all.v2023.2.Mm.symbols.gmt") |> as_tibble()

GSEASM = smallMacro |> 
  as_tibble(rownames = "gene") |> 
  arrange(-avg_log2FC) |> 
  pull(avg_log2FC, gene) |> 
  GSEA(TERM2GENE = geneSetHallmark, verbose = F, pvalueCutoff = 0.99)

library(enrichplot)

GO = clusterProfiler:::get_GO_data("org.Mm.eg.db", "ALL", "SYMBOL")

# gseaplot2(GSEASM, geneSetID = 7)

# GSEASM@result |> 
#   write_csv("./EDA/smallMacro/GSEA/Hallmark/smallMacro_result.csv")

### EnrichGOKEGG ----

enrichActSup = function(x_, toGo_ = "GO") {
  list(
    act = x_ |> 
      as_tibble(rownames = "gene") |> 
      filter(avg_log2FC > 0) |> 
      pull(gene) |> 
      enrichment_of(toGo_ = toGo_), 
    sup = x_ |> 
      as_tibble(rownames = "gene") |> 
      filter(avg_log2FC < 0) |> 
      pull(gene) |> 
      enrichment_of(toGo_ = toGo_)
  )
}

dotPlotPlus = function(enrichLst_, nTerms_ = 7) {
  
  pToLabel_ = function(vec__) {
    vec__[is.na(vec__)] = 1
    cut(
      vec__,
      breaks = c(-Inf, 0.0001, 0.001, 0.01, 0.05, Inf),
      labels = c("FDR<0.0001", "FDR<0.001", "FDR<0.01", "FDR<0.05", " - ") 
    )
  }
  
  splitTerms__ = function(Des__) {
    
    DesVec__ = str_split(Des__, " ", simplify = F)[[1]]
    cutPoint__ = ceiling(length(DesVec__)/2) + 1
    
    DesVec1__ = DesVec__[1:cutPoint__]; DesVec2__ = DesVec__[cutPoint__:length(DesVec__)]
    
    paste0(paste(DesVec1__, collapse = " "), "\n", paste(DesVec2__, collapse = " "))
    
  }
  
  enrichLst_$act@result$type = "Activated"
  enrichLst_$sup@result$type = "Suppressed"
  
  evalParse_ = \(x__) eval(parse(text = x__))
  
  dataPlot_ = enrichLst_ |> 
    lapply(
      \(each__) each__@result |> 
        filter(qvalue < 0.05) |> 
        mutate(GeneRatio = sapply(GeneRatio, evalParse_)) |> 
        slice_max(-qvalue, n = nTerms_) |> 
        arrange(GeneRatio) |> 
        mutate(Description = capitalize(Description), 
               Description = map_chr(Description, ~ ifelse(str_count(.x, " ") > 3, splitTerms__(.x), .x)), 
               Description = factor(Description, levels = Description), 
               qvalue = pToLabel_(qvalue))
    ) |> bind_rows() 
  
  dataPlot_ |> 
    ggplot() +
    geom_point(aes(GeneRatio, Description, color = qvalue, size = Count)) +
    # geom_text(aes(GeneRatio, Description, label = Count)) +
    scale_color_manual(values = c("FDR<0.0001" = "#4e62ab", "FDR<0.001" = "#479db4", "FDR<0.01" = "#87d0a6", "FDR<0.05" = "#cbe99d", " - " = "#f7fbae")) +
    facet_wrap(~ type, nrow = 2, scales = "free_y") +
    theme_bw() +
    ylab("")
  
}

converID = function(enrichObj_) {
  
  idToSymbol_ = enrichObj_@result$geneID |> 
    str_split('/') |> 
    unlist() |> 
    unique() |> 
    bitr('ENTREZID', 'SYMBOL', OrgDb = 'org.Mm.eg.db') |> 
    pull(SYMBOL, ENTREZID)
  
  SYMBOLs_ = enrichObj_@result$geneID |> 
    str_split('/') |> 
    map(~ idToSymbol_[.x] |> paste(collapse = '/')) |> 
    unlist()
  
  enrichObj_@result |> 
    mutate(Symbol = SYMBOLs_)
  
}

SMActSupGO = smallMacro |> 
  filter(p_val_adj < 0.05) |> 
  filter(abs(avg_log2FC) > 1) |> 
  enrichActSup(toGo_ = "GO")

SMActSupKEGG = smallMacro |> 
  filter(p_val_adj < 0.05) |> 
  filter(abs(avg_log2FC) > 1) |> 
  enrichActSup(toGo_ = "KEGG")

dotPlotSMGO = dotPlotPlus(SMActSupGO)
dotPlotSMKEGG = dotPlotPlus(SMActSupKEGG)

ggsave("resultByTask/0229/dotPlotSMGO.pdf", dotPlotSMGO, width = 8, height = 8)
ggsave("resultByTask/0229/dotPlotSMKEGG.pdf", dotPlotSMKEGG, width = 8, height = 8)

SMActSupGO |> 
  iwalk(\(enrichObj_, ind_) converID(enrichObj_) |> write_csv(paste0('resultByTask/0229/SMGO_', ind_, '.csv')))

SMActSupKEGG |> 
  iwalk(\(enrichObj_, ind_) converID(enrichObj_) |> write_csv(paste0('resultByTask/0229/SMKEGG_', ind_, '.csv')))

### Heatmap-RC ----

GOterms = c("respiratory chain complex I", "respiratory chain complex II", "respiratory chain complex III", "respiratory chain complex IV", "ATPase complex")
GOID = names(GO$PATHID2NAME)[GO$PATHID2NAME %in% GOterms]AA467197

toDrop = c(c('foxred1', 'cyc1', 'aa467197', 'cox4i2', 'cox6a2', 'cox6b2', 'sdhc', 'Ndufa4l2') |> str_to_title(), 'AA467197')
idTable = factor(c("respiratory chain complex I" = "I", "respiratory chain complex II" = "II", "respiratory chain complex III" = "III", "respiratory chain complex IV" = "IV", "ATPase complex" = "V"))

geneTable = GO$PATHID2EXTID[GOID] |> 
  imap(\(vec_, ind_) tibble(ID = ind_, gene = vec_)) |> 
  bind_rows() |> 
  mutate(des = idTable[GO$PATHID2NAME[GO$PATHID2NAME %in% GOterms][ID]], desNum = as.numeric(des)) |> 
  filter(des != "V" | (str_detect(gene, "Atp") & nchar(gene) < 7)) |> 
  group_by(gene) |> 
  slice_min(desNum, n=1) |> 
  filter(!gene %in% toDrop)

rcExprs = FetchData(epiAKTP, vars = geneTable$gene)

dataPlotAll = cbind(epiAKTP@meta.data[, c("Stage", "cluster")], rcExprs) |> 
  as_tibble(rownames = "cell") |> 
  rename(stage = Stage) |> 
  rename_with(~ str_sub(.x, 5), matches("_"))

library(ComplexHeatmap)
library(circlize)

rha = rowAnnotation(
  Pathway = factor(geneTable |> filter(gene %in% colnames(dataPlotAll)) |> pull(des)), 
  col = list(Pathway = c("I" = "#F5B375", "II" = "#5F9BBE", "III" = "#01665e", "IV" = "#8c510a", "V" = "#F19294")), 
  border = TRUE
)

chaStage = HeatmapAnnotation(
  Stage = dataPlotAll$stage, 
  col = list(
    Stage = c("Primary Tumor"="#4A9D47", "Micrometastases"="#F19294", "Small Metastases"="#E45D61", "Macrometastases"="#96C3D8")
  ), 
  border = TRUE
)

chaCluster = HeatmapAnnotation(
  Stage = dataPlotAll$cluster, 
  col = list(
    Stage = setNames(ggsci::pal_cosmic()(6), levels(dataPlotAll$cluster))
  ), 
  border = TRUE
)

pStage = Heatmap(
  t(dataPlotAll[, -c(1:3)]), 
  show_column_names = F, 
  cluster_rows = F, 
  cluster_columns = F, 
  row_names_side = "left", 
  col = colorRamp2(c(-2, 0, 3), c("lightblue", "black", "yellow")), 
  column_split = dataPlotAll$stage, 
  row_split = factor(geneTable |> filter(gene %in% colnames(dataPlotAll)) |> pull(des)), 
  right_annotation = rha, 
  top_annotation = chaStage, 
  border_gp = gpar(col = "black", lty = 1)
  # row_title = sheets[[ind_+1]], 
  # row_title_gp = gpar(fill = colorPair[ind_*2], col = "white", border = "black"), 
  # heatmap_legend_param = list(title = sheets[[ind_+1]]), 
)

pCluster = Heatmap(
  t(dataPlotAll[, -c(1:3)]), 
  show_column_names = F, 
  cluster_rows = F, 
  cluster_columns = F, 
  row_names_side = "left", 
  col = colorRamp2(c(-2, 0, 3), c("lightblue", "black", "yellow")), 
  column_split = dataPlotAll$cluster, 
  row_split = factor(geneTable |> filter(gene %in% colnames(dataPlotAll)) |> pull(des)), 
  right_annotation = rha, 
  top_annotation = chaCluster, 
  border_gp = gpar(col = "black", lty = 1)
  # row_title = sheets[[ind_+1]], 
  # row_title_gp = gpar(fill = colorPair[ind_*2], col = "white", border = "black"), 
  # heatmap_legend_param = list(title = sheets[[ind_+1]]), 
)

pStage
pCluster

library(Cairo)

CairoPDF("resultByTask/0229/heatmapByStage.pdf", width = 9, height = 18)
pStage
dev.off()

CairoPDF("resultByTask/0229/heatmapByCluster.pdf", width = 9, height = 18)
pCluster
dev.off()

### mitoCarta ---- 

mitoCarta = read_tsv("./data/mitoCarta.txt") |> 
  filter(!str_detect(Symbol, ">"))

mitoCartaGenes = smallMacro |> 
  as_tibble(rownames = "gene") |> 
  filter(gene %in% mitoCarta$Symbol) |> 
  filter(p_val_adj < 0.05) |> 
  select(gene, avg_log2FC)

inner_join(mitoCartaGenes, mitoCarta, by = c("gene" = "Symbol")) |> 
  write_excel_csv("result/mitoCartaGenesSig.csv")

## C0-C3 ----

enrichActSup = function(x_) {
  list(
    act = x_ |> 
      as_tibble(rownames = "gene") |> 
      filter(avg_log2FC > 0) |> 
      pull(gene) |> 
      enrichment_of(), 
    sup = x_ |> 
      as_tibble(rownames = "gene") |> 
      filter(avg_log2FC < 0) |> 
      pull(gene) |> 
      enrichment_of()
  )
}

dotPlotPlus = function(enrichLst_, nTerms_ = 7) {
  
  pToLabel_ = function(vec__) {
    vec__[is.na(vec__)] = 1
    cut(
      vec__,
      breaks = c(-Inf, 0.0001, 0.001, 0.01, 0.05, Inf),
      labels = c("FDR<0.0001", "FDR<0.001", "FDR<0.01", "FDR<0.05", " - ") 
    )
  }
  
  splitTerms__ = function(Des__) {
    
    DesVec__ = str_split(Des__, " ", simplify = F)[[1]]
    cutPoint__ = ceiling(length(DesVec__)/2) + 1
    
    DesVec1__ = DesVec__[1:cutPoint__]; DesVec2__ = DesVec__[cutPoint__:length(DesVec__)]
    
    paste0(paste(DesVec1__, collapse = " "), "\n", paste(DesVec2__, collapse = " "))
    
  }
  
  enrichLst_$act@result$type = "Activated"
  enrichLst_$sup@result$type = "Suppressed"
  
  evalParse_ = \(x__) eval(parse(text = x__))
  
  dataPlot_ = enrichLst_ |> 
    lapply(
      \(each__) each__@result |> 
        filter(qvalue < 0.05) |> 
        mutate(GeneRatio = sapply(GeneRatio, evalParse_)) |> 
        slice_max(-qvalue, n = nTerms_) |> 
        arrange(GeneRatio) |> 
        mutate(Description = capitalize(Description), 
               Description = map_chr(Description, ~ ifelse(str_count(.x, " ") > 3, splitTerms__(.x), .x)), 
               Description = factor(Description, levels = Description), 
               qvalue = pToLabel_(qvalue))
    ) |> bind_rows() 
  
  dataPlot_ |> 
    ggplot() +
    geom_point(aes(GeneRatio, Description, color = qvalue, size = Count)) +
    # geom_text(aes(GeneRatio, Description, label = Count)) +
    scale_color_manual(values = c("FDR<0.0001" = "#4e62ab", "FDR<0.001" = "#479db4", "FDR<0.01" = "#87d0a6", "FDR<0.05" = "#cbe99d", " - " = "#f7fbae")) +
    facet_wrap(~ type, nrow = 2, scales = "free_y") +
    theme_bw() +
    ylab("")
  
}

C0C3 = FindMarkers(epiAKTP, ident.1 = "C0", ident.2 = "C3", only.pos = F, logfc.threshold = 1, assay = "MAGIC_integrated")
C0C3EnrichActSup = enrichActSup(C0C3)

C0C3EnrichPlot = dotPlotPlus(C0C3EnrichActSup, nTerms_ = 8)

ggsave("resultByTask/0229/C0C3EnrichPlot.pdf", C0C5EnrichPlot, width = 8, height = 8)

## C0-C5 ----

#### violinPlot ----

genesOP = GO$PATHID2EXTID[[names(GO$PATHID2NAME[which(GO$PATHID2NAME == "oxidative phosphorylation")])]]

epiAKTP = AddModuleScore(epiAKTP, list(genesOP), name = "OP")

dataPlotVln = epiAKTP@meta.data |> 
  select(cluster, score = OP1) |> 
  filter(cluster == "C0" | cluster == "C5") |> 
  as_tibble()

statistic = wilcox.test(score ~ cluster, data = dataPlotVln); statistic = paste0("P=", signif(statistic$p.value, 3))

C0C5VlnPlot = dataPlotVln |> 
  ggplot(aes(cluster, score, fill = cluster, color = cluster)) +
  geom_jitter(alpha = 0.3, shape = 21) +
  geom_violin(alpha = 0.6) +
  scale_fill_manual(values = c("#01665e", "#8c510a")) +
  scale_color_manual(values = c("#01665e", "#8c510a")) +
  ylab("Oxidative Phosphorylation") +
  xlab("") +
  labs(color = "", fill = "") +
  annotate("text", x = 2, y = 1, label = statistic) +
  theme_classic() +
  theme(
    legend.position = "top"
  )

ggsave("resultByTask/0229/C0C5VlnPlot.pdf", C0C5VlnPlot, width = 3, height = 3)

### Enrich ----

C0C5 = FindMarkers(epiAKTP, ident.1 = "C0", ident.2 = "C3", only.pos = F, logfc.threshold = 1)
C0C5EnrichActSup = enrichActSup(C0C5)

C0C5EnrichPlot = dotPlotPlus(C0C5EnrichActSup, nTerms_ = 8)

ggsave("resultByTask/0229/C0C5EnrichPlot.pdf", C0C5EnrichPlot, width = 8, height = 8)

## GSEA-BarPlot ----

dataPlotGSEAPre = read_csv('data/smallMacro_result-作图.csv')
dataPlotGSEA = dataPlotGSEAPre|> 
  add_row(NES = 0, Description = "") |> 
  mutate(Description = str_sub(Description, 10) |> str_replace_all('_', ' ')) |> 
  arrange(NES) |> 
  mutate(Description = factor(Description, levels = Description), 
         color = ifelse(NES>0, "#8c510a", "#01665e"))

GSEABarPlot = ggplot() +
  geom_col(data = dataPlotGSEA, aes(NES, Description, fill = color), alpha = 0.7, width = 0.6) +
  # geom_text(data = dataPlotGSEA |> filter(NES>0), aes(-0.1, Description, label = Description, color = color), hjust = 1) +
  # geom_text(data = dataPlotGSEA |> filter(NES<0), aes(0.1, Description, label = Description, color = color), hjust = 0) +
  # scale_y_discrete(breaks = NULL) +
  scale_x_continuous(position = "top") +
  scale_color_identity() +
  scale_fill_identity() +
  theme_classic() +
  ylab("") +
  theme(
    axis.line.y = element_blank(), axis.ticks.y = element_blank(), text = element_text(face = 'bold')
  )

ggsave('resultByTask/0305/GSEABarPlot.pdf', GSEABarPlot, width = 7, height = 4.5)

## hallmark-VlnPlot ----

geneSetHallmark = read.gmt("./data/mh.all.v2023.2.Mm.symbols.gmt") |> as_tibble()

wantedHallmark = geneSetHallmark |> 
  # filter(str_detect(term, 'MYC') | str_detect(term, 'HYPOXIA')) |> 
  filter(str_detect(term, 'MYC')) |> 
  mutate(term = droplevels(term)); wantedHallmark = split(wantedHallmark$gene, wantedHallmark$term)

for (i in seq_along(wantedHallmark)) {
  
  epiAKTP = AddModuleScore(epiAKTP, wantedHallmark[i], name = names(wantedHallmark)[i])
  
}

dataPlot = epiAKTP@meta.data |> 
  select(stage = Stage, contains('HALLMARK')) |> 
  pivot_longer(-stage, names_to = 'pathway', values_to = 'value') |> 
  mutate(pathway = str_sub(pathway, 10, -2) |> str_replace_all('_', ' '))

statistic = dataPlot |> 
  group_by(pathway) |> 
  rstatix::kruskal_test(value~stage) |> 
  mutate(sig = paste0('Kruskal Test Pvalue=', signif(p, 3)))

plotHallmarkVln = ggplot() +
  geom_violin(data = dataPlot, aes(stage, value, fill = stage), alpha = 0.7) +
  geom_jitter(data = dataPlot, aes(stage, value, fill = stage), shape = 21, alpha = 0.5) +
  geom_text(data = statistic, aes(3.5, 1.5, label = sig)) +
  scale_fill_manual(values = c("#4A9D47", "#F19294", "#E45D61", "#96C3D8")) +
  theme_classic() +
  facet_wrap(~ pathway, ncol = 1, strip.position = 'left') +
  xlab('') +
  ylab('') +
  labs(fill = '') +
  theme(
    legend.position = 'top', 
    text = element_text(face = "bold")
  )

ggsave('resultByTask/0229/plotHallmarkVln.pdf', plotHallmarkVln, width = 6, height = 3.5)

## hallmark-GSEA ----

dataPlotGSEAPre = read_csv('data/smallMacro_result-作图.csv')
dataPlotGSEA = dataPlotGSEAPre |> 
  add_row(NES = 0, Description = "") |> 
  mutate(Description = str_sub(Description, 10)) |> 
  arrange(-NES) |> 
  mutate(Description = factor(Description, levels = Description), 
         color = ifelse(NES>0, "#8c510a", "#01665e"))
pathways = dataPlotGSEA$ID[c(1:5)]

allFea = epiAKTP@assays$MAGIC_integrated@data |> rownames()

smallMacro = FindMarkers(epiAKTP, ident.1 = "Small Metastases", ident.2 = "Macrometastases", only.pos = F, logfc.threshold = 0, group.by = "Stage", features = allFea)

geneSetHallmark = read.gmt("./data/mh.all.v2023.2.Mm.symbols.gmt") |> as_tibble() |> filter(term %in% pathways)

GSEASM = smallMacro |> 
  as_tibble(rownames = "gene") |> 
  arrange(-avg_log2FC) |> 
  pull(avg_log2FC, gene) |> 
  GSEA(TERM2GENE = geneSetHallmark, verbose = F, pvalueCutoff = 0.99)

library(enrichplot)

plotLst = list()
for (i in seq_along(GSEASM@result$ID)) {
  plotLst[[i]] = gseaplot2(GSEASM, geneSetID = i, title = GSEASM@result$ID[[i]])
  plotLst[[i]][[1]] = plotLst[[i]][[1]] +
    labs(subtitle = paste0('NES=', signif(GSEASM@result$NES[i], 3), ' FDR=', signif(GSEASM@result$p.adjust[i], 3))) +
    ylab('Enrichment Score')
  ggsave(paste0('resultByTask/0305/GSEA/', GSEASM@result$ID[[i]], '.pdf'), plotLst[[i]], width = 6, height = 4)
}
